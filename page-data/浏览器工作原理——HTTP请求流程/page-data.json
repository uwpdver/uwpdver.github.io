{"componentChunkName":"component---src-templates-blog-post-js","path":"/浏览器工作原理——HTTP请求流程/","result":{"data":{"site":{"siteMetadata":{"title":"要没时间了的博客"}},"markdownRemark":{"id":"658ec075-cbf0-592e-85e3-a1515f97f080","excerpt":"HTTP 请求流程 HTTP 请求流程示意图 构建请求 查找缓存 准备 IP 地址和端口 等待 TCP 队列 建立 TCP 连接 发起 HTTP 请求 发送请求行 发送请求头 服务器处理请求 服务器返回请求行 服务器返回响应头 服务器返回响应体 断开 TCP…","html":"<h2>HTTP 请求流程</h2>\n<p><img src=\"https://bl3301files.storage.live.com/y4msr6Uc6wYHTsbX_u5y-DOad3OueQXHcOqb1MGUUNZPY-VZL5DWNP1xU1HNF5rQfDPO54I-mImOk9J2Q_dJxsARjxkWQpyd9NeQDoogErqBO1UaGTZVbss1JGHOba9ENbuJX_NejYXzcBd86dQRLP7VgGDGkmRNv1U0xvhtvW19KrZLJBtsurVtmG1lA4djMLy?width=1142&#x26;height=423&#x26;cropmode=none\" alt=\"HTTP 请求流程示意图\" title=\"HTTP 请求流程示意图\"></p>\n<ol>\n<li>构建请求</li>\n<li>查找缓存</li>\n<li>准备 IP 地址和端口</li>\n<li>等待 TCP 队列</li>\n<li>建立 TCP 连接</li>\n<li>发起 HTTP 请求\n<ul>\n<li>发送请求行</li>\n<li>发送请求头</li>\n</ul>\n</li>\n<li>服务器处理请求\n<ul>\n<li>服务器返回请求行</li>\n<li>服务器返回响应头</li>\n<li>服务器返回响应体</li>\n</ul>\n</li>\n<li>断开 TCP 连接</li>\n</ol>\n<h2>浏览器缓存</h2>\n<h3>强缓存</h3>\n<p>不会向服务器发送任何请求，直接从本地缓存中读取并且返回状态码：200 OK。\n200 from memory cache：缓存在内存中，从内存中读取，浏览器关闭则丢失。\n200 from disk cache：缓存在磁盘中，从磁盘中读取，浏览器关闭仍然存在。<br>\n优先级：memory cache > disk cache > network</p>\n<h3>协商缓存</h3>\n<p>向服务器发送请求，服务器根据这个请求头部中的一些参数判断是否命中协商缓存，如果命中，则返回 304 状态码，并带上新的响应头部通知浏览器从缓存中读取资源。\n<img src=\"https://bl3301files.storage.live.com/y4mulom0HnZDweCxsXb1AGyz8wwE_5m_talDCI9hWol5x2HjRVyMVD_CeIBV7Rr_AuYegs5eW715ER9NRf5a7-SZE7LgsEHEYff99S015zMVUp2EE8TAmErXCkzGTV7xJS9sDQKg_dAUe15WJaD9JybZogDADtYJvABx8XCZDLhfGI7MNZYGrbz2hRZAD1uNvly?width=627&#x26;height=884&#x26;cropmode=none\" alt=\"浏览协商缓存机制流程图\" title=\"浏览协商缓存机制流程图\"></p>\n<p>Last-Modifed/If-Modified-Since 和 Etag/If-None-Match 是分别成对出现的，呈一一对应关系。“/”之前的字段是在响应头中的，“/”之后的字段是请求头中的。当响应被缓存时，浏览器根据缓存中对应资源的的响应头中的 Etag 和 Last-Modifed 字段判断是否在请求头中附加 If-Modified-Since 和 If-None-Match 字段。</p>\n<p>Etag：<br>\nEtag是属于HTTP 1.1属性，它是由服务器（Apache 或者其他工具）生成返回给前端，用来帮助服务器控制 Web 端的缓存验证。 Apache 中，Etag 的值，默认是对文件的索引节（INode），大小（Size）和最后修改时间（MTime）进行Hash后得到的。</p>\n<p>If-None-Match:<br>\n当资源过期时，浏览器发现响应头里有 Etag，则再次向服务器请求时带上请求头 If-None-Match(值是 Etag 的值)。服务器收到请求进行比对，决定返回 200 或 304。</p>\n<p>Last-Modified：\n源服务器认为资源最后的修改时间</p>\n<p>If-Modified-Since：\n当资源过期时（浏览器判断 Cache-Control 标识的 max-age 过期），发现响应头具有 Last-Modified 声明，则再次向服务器请求时带上头 If-Modified-Since，表示请求时间。服务器收到请求后发现有 If-Modified-Since 则与被请求资源的最后修改时间进行对比（Last-Modified）,若最后修改时间较新（大），说明资源又被改过，则返回最新资源，HTTP 200 OK;若最后修改时间较旧（小），说明资源无新修改，响应HTTP 304 走缓存。</p>\n<ul>\n<li>Last-Modifed/If-Modified-Since 的时间精度是秒，而 Etag 可以更精确。</li>\n<li>Etag优先级是高于Last-Modifed 的，所以服务器会优先验证 Etag</li>\n<li>Last-Modifed/If-Modified-Since 是http1.0的头字段</li>\n</ul>\n<h2>DNS</h2>\n<p>HTTP 协议是基于 TCP/IP 的，建立 TCP 连接需要 IP 地址，对于用户而言代表网络资源的 URL 中提供的都是便于记忆的域名，所以就需要 DNS 将域名转换成 IP，浏览器提供 DNS 缓存。</p>\n<h2>最大连接数</h2>\n<p>同一个域名下最多拥有 6 个已建立的 TCP 连接。多出的请求会排队等待，直至有可用的连接。</p>\n<h2>请求行格式</h2>\n<h3>HTTP 请求行</h3>\n<table>\n<thead>\n<tr>\n<th>请求方法</th>\n<th>请求URL</th>\n<th>协议版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET</td>\n<td>/library?search=news</td>\n<td>HTTP/1.1</td>\n</tr>\n</tbody>\n</table>\n<h3>HTTP 响应行</h3>\n<table>\n<thead>\n<tr>\n<th>协议版本</th>\n<th>状态码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>HTTP/1.1</td>\n<td>200 OK</td>\n</tr>\n</tbody>\n</table>","tableOfContents":"<ul>\n<li><a href=\"#http-%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B\">HTTP 请求流程</a></li>\n<li><a href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98\">浏览器缓存</a></li>\n<li><a href=\"#dns\">DNS</a></li>\n<li><a href=\"#%E6%9C%80%E5%A4%A7%E8%BF%9E%E6%8E%A5%E6%95%B0\">最大连接数</a></li>\n<li><a href=\"#%E8%AF%B7%E6%B1%82%E8%A1%8C%E6%A0%BC%E5%BC%8F\">请求行格式</a></li>\n</ul>","frontmatter":{"title":"浏览器工作原理——HTTP请求流程","date":"2021年10月17日","description":"《浏览器工作原理》专栏第三节的学习笔记，学习了浏览器中发起 HTTP 请求的流程。","tags":["笔记","浏览器","计算机网络","HTTP","浏览器工作原理"]}},"previous":{"fields":{"slug":"/浏览器工作原理——TCP协议/"},"frontmatter":{"title":"浏览器工作原理——TCP协议"}},"next":{"fields":{"slug":"/浏览器工作原理——导航流程/"},"frontmatter":{"title":"浏览器工作原理——导航流程"}}},"pageContext":{"id":"658ec075-cbf0-592e-85e3-a1515f97f080","previousPostId":"2c045c0f-5ec2-567f-8c2d-26daa6fcd225","nextPostId":"44db4148-9c5e-5de0-877a-e5f41947ef36"}},"staticQueryHashes":["2792646216","2841359383"]}