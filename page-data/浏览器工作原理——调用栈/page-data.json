{"componentChunkName":"component---src-templates-blog-post-js","path":"/浏览器工作原理——调用栈/","result":{"data":{"site":{"siteMetadata":{"title":"要没时间了的博客"}},"markdownRemark":{"id":"d4f3f25b-dd81-5e03-8454-5af92587f471","excerpt":"总结 了解调用栈可以更好地理解 JavaScript 代码是按照什么顺序被执行的。调用栈是用来 JavaScript…","html":"<h2>总结</h2>\n<p>了解调用栈可以更好地理解 JavaScript 代码是按照什么顺序被执行的。调用栈是用来 JavaScript 解释器用来<strong>追踪函数执行流</strong>的一种机制，通过这种机制，可以追踪到哪个函数正在执行（栈顶），执行的函数体中又调用了哪个函数（创建新的栈帧并压入调用栈），函数在调用栈中表示为执行上下文。</p>\n<ul>\n<li>每调用一个函数，解释器就会把该函数（执行上下文）添加进调用栈并开始执行。</li>\n<li>正在调用栈中执行的函数还调用了其它函数，那么新函数也将会被添加进调用栈，一旦这个函数被调用，便会立即执行。</li>\n<li>当前函数执行完毕后，解释器将其清出调用栈，继续执行当前执行环境下的剩余的代码。</li>\n<li>当分配的调用栈空间被占满时，会引发“堆栈溢出”错误。</li>\n</ul>\n<h2>执行上下文</h2>\n<p>有关正在运行的函数的执行过程的相关信息被保存在它的执行上下文中。<a href=\"https://tc39.github.io/ecma262/#sec-execution-contexts\">执行上下文</a> 是一个内部数据结构，它包含有关函数执行时的详细细节：当前控制流所在的位置，当前的变量，<code class=\"language-text\">this</code> 的值（此处我们不使用它），以及其它的一些内部细节。</p>\n<p>一个函数调用仅具有一个与其相关联的执行上下文。</p>\n<p>当一个函数进行嵌套调用时，将发生以下的事儿：</p>\n<ul>\n<li>当前函数被暂停；</li>\n<li>与它关联的执行上下文被一个叫做 <strong>执行上下文堆栈</strong> 的特殊数据结构保存；</li>\n<li>执行嵌套调用；</li>\n<li>嵌套调用结束后，从堆栈中恢复之前的执行上下文，并从停止的位置恢复外部函数。</li>\n</ul>\n<h2>相关阅读</h2>\n<ul>\n<li>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Call_stack\">Call stack（调用栈） - 术语表 | MDN (mozilla.org)</a></p>\n</li>\n<li>\n<p><a href=\"https://zh.javascript.info/recursion\">递归和堆栈 (javascript.info)</a></p>\n</li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n<li><a href=\"#%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87\">执行上下文</a></li>\n<li><a href=\"#%E7%9B%B8%E5%85%B3%E9%98%85%E8%AF%BB\">相关阅读</a></li>\n</ul>","frontmatter":{"title":"浏览器工作原理——调用栈","date":"2021年10月25日","description":"《浏览器工作原理》专栏第八节的学习笔记，学习了调用栈的概念，还介绍了调用栈的工作方式。","tags":["笔记","JavaScript","JavaScript 运行时","浏览器工作原理"]}},"previous":{"fields":{"slug":"/反转链表——递归，链表/"},"frontmatter":{"title":"反转链表——递归，链表"}},"next":{"fields":{"slug":"/合并两个有序链表——链表/"},"frontmatter":{"title":"合并两个有序链表——链表"}}},"pageContext":{"id":"d4f3f25b-dd81-5e03-8454-5af92587f471","previousPostId":"15ba5fc9-d111-5204-bbee-6ce492bcdaa3","nextPostId":"ff80c6a3-ecab-59c4-b677-d8efd0074849"}},"staticQueryHashes":["2792646216","2841359383"]}