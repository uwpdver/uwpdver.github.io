{"componentChunkName":"component---src-templates-blog-post-js","path":"/分析运行时性能/","result":{"data":{"site":{"siteMetadata":{"title":"要没时间了的博客"}},"markdownRemark":{"id":"b731d618-0664-500c-a631-e74350f1fbb8","excerpt":"原文：Analyze runtime performance 作者：MSEdgeTeam，mikehoffms，DanishOnGit，jm-trd-ms。 用户往往都期待页面是可交互且丝滑流畅的，而像素管道（pixel pipeline）中的每一个阶段都有可能导致卡顿（jank…","html":"<p>原文：<a href=\"https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/rendering-tools/\">Analyze runtime performance</a><br>\n作者：<a href=\"https://github.com/MSEdgeTeam\">MSEdgeTeam</a>，<a href=\"https://github.com/mikehoffms\">mikehoffms</a>，<a href=\"https://github.com/DanishOnGi\">DanishOnGit</a>，<a href=\"https://github.com/jm-trd-ms\">jm-trd-ms</a>。</p>\n<p>用户往往都期待页面是可交互且丝滑流畅的，而像素管道（pixel pipeline）中的每一个阶段都有可能导致卡顿（jank）。本文帮助你学习如何识别和修复常见的可能导致运行时性能问题，以及相关的工具。</p>\n<h2>概述</h2>\n<ul>\n<li>不要写强制浏览器重新计算布局的 JavaScript。分离读和写函数，并且优先执行读操作。</li>\n<li>不要让你的 CSS 过于复杂。使用更少的 CSS 并且保持你的 CSS 选择器简单。</li>\n<li>尽可能避免浏览器布局操作（layout），选择使用那些完全不会触发布局的 CSS。</li>\n<li>绘制（painting）可能比任何其他的渲染活动花上更多的时间。注意绘制瓶颈。</li>\n</ul>\n<h2>JavaScript</h2>\n<p>JavaScript 计算，尤其是触发昂贵的视觉变化的那种，可能会拖慢应用的性能。不要让时机不恰当或长时间运行的 JavaScript 干扰用户的交互。</p>\n<h3>JavaScript：工具</h3>\n<p>使用 <strong>Performance</strong> 工具录制，找出运行时间长得离谱的<code class=\"language-text\">执行脚本（Evaluate Script）</code> 事件。</p>\n<p>如果你发现你的 JavaScript 执行过程频繁卡顿（渲染的中断），你可能需要更进一步地分析并且收集一份 JavaScript CPU 概况（profiles）。CPU 概况展示了页面中函数的运行时间花费在了哪里。你可以在<a href=\"https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/rendering-tools/js-runtime\">Speed up JavaScript runtime</a>中学习怎样创建 CPU 概况。</p>\n<h3>JavaScript：问题</h3>\n<p>下面这个表格描述了一些常见的 JavaScript 问题和可能的方法。</p>\n<table>\n<thead>\n<tr>\n<th>问题</th>\n<th>例子</th>\n<th>解决方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>昂贵的输入处理程序影响页面响应和动画。</td>\n<td>触摸，视差滚动</td>\n<td>让浏览器去处理触摸和滚动，或者尽量推迟事件监听器的绑定。 推荐阅读文章 <a href=\"https://calendar.perfplanet.com/2013/the-runtime-performance-checklist/\">Expensive Input Handlers in Paul Lewis’ runtime performance checklist</a></td>\n</tr>\n<tr>\n<td>时机不恰当的 JavaScript 影响页面响应，动画，和加载</td>\n<td>用户在页面加载完成后向右滚动，setTimeout / setInterval。</td>\n<td>使用 JavaScript 运行时：用 <code class=\"language-text\">requestAnimationFrame</code> 将 DOM 操作分散到各帧中，使用 <a href=\"https://developer.mozilla.org/docs/Web/API/Web_Workers_API/Using_web_workers\">Web Workers</a></td>\n</tr>\n<tr>\n<td>长时间运行的 JavaScript 影响页面响应</td>\n<td>太多的 JS 工作导致 <a href=\"https://developer.mozilla.org/docs/Web/API/Web_Workers_API/Using_web_workers\">DOMContentLoaded</a> 事件被延迟</td>\n<td>把单纯的计算工作移至 <a href=\"https://developer.mozilla.org/docs/Web/API/Web_Workers_API/Using_web_workers\">Web Workers</a>。如果你需要访问 DOM，那就使用 <code class=\"language-text\">requestAnimationFrame</code>。</td>\n</tr>\n<tr>\n<td>垃圾脚本影响页面响应或者动画</td>\n<td>垃圾收集可能发生在任何地方</td>\n<td>写更少的垃圾脚本，推荐阅读文章 <a href=\"https://calendar.perfplanet.com/2013/the-runtime-performance-checklist/\">Garbage Collection in Animation in Paul Lewis’ runtime performance checklist</a>。</td>\n</tr>\n</tbody>\n</table>\n<h2>样式</h2>\n<p>改变样式的开销也很大，尤其是当这些改变影响多个 DOM 中的元素的时候。当你对一个元素应用样式时，浏览器会计算出所有相关元素的影响，重新计算布局并重新绘制。</p>\n<h3>样式：工具</h3>\n<p>使用 <strong>Performance</strong> 工具做记录，检查大型的 <code class=\"language-text\">Recalculate Style</code> 事件（紫色显示）。</p>\n<p>选择一个 <code class=\"language-text\">Recalculate Style</code> 事件，在 <strong>Details</strong> 面板查看更多的相关信息。如果这个样式改变花了太长时间，那这就是一个性能问题。如果这个样式计算影响了很多元素，那这就有可改进的空间。</p>\n<p><img src=\"https://bl3301files.storage.live.com/y4mTIdlYB-BTSXaD6MhNEs7LRC7rz5VfuTrzrJtxeLj5D5FZLaDdeEJ3EnIwmEVHsNYVkZjUsKMiN1GBEorwe2CufY07LpTcytPlWKaHD34NLRIEaC8DyrNa_2_DOnu16fAfXj_8XwpuhqpweHJdCo1gcQU1Skn8nue-Rib8dk6j3xKC-08L4VrH6o6wlwjlPVk?width=1862&#x26;height=1078&#x26;cropmode=none\" alt=\"rendering-tools-performance-recalculate-style-summary.msft\"></p>\n<p>为了减少 <code class=\"language-text\">Recalculate Style</code> 事件的影响：</p>\n<ul>\n<li>使用 <a href=\"https://csstriggers.com/\">CSS Triggers</a> 来了解哪些 CSS 属性会触发布局，绘制，和合成。这些属性对渲染性能的影响最大。</li>\n<li>换成影响较小的属性。</li>\n</ul>\n<h3>样式：问题</h3>\n<p>下面这个表格描述了一些常见的样式问题和可能的方法。</p>\n<table>\n<thead>\n<tr>\n<th>问题</th>\n<th>例子</th>\n<th>解决方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>昂贵的样式计算影响页面响应和动画。</td>\n<td>任何改变元素形状的 CSS 属性，比如宽度，高度，或者位置；浏览器会检查其他所有的元素并且重新计算布局。</td>\n<td>避免触发布局的 CSS</td>\n</tr>\n<tr>\n<td>复杂的选择器计算影响页面响应和动画。</td>\n<td>嵌套选择器迫使浏览器了解所有其他元素的一切，包括父元素和子元素。</td>\n<td>在你的CSS中用 class 引用一个元素</td>\n</tr>\n</tbody>\n</table>\n<h2>布局</h2>\n<p>布局（在 Firefox 中又称重排）是浏览器计算页面中所有元素的位置和尺寸的过程。web 的布局模型意味着元素之间可能会互相影响；例如 <code class=\"language-text\">&lt;body></code> 元素的宽度通常会影响它的任何子元素的宽度，以此类推，从树上一直向下。对于浏览器来说，这个过程可能相当复杂。</p>\n<p>根据经验来说，如果你在一帧完成之前要求 DOM 返回一个几何属性的值，你会发现你触发了 “强制同步布局”，如果经常重复对大型 DOM 树执行的话，这将是一个很大的性能瓶颈。</p>\n<h3>布局：工具</h3>\n<p>占位</p>\n<h3>布局：问题</h3>\n<p>下面这个表格描述了一些常见的布局问题和可能的方法。</p>\n<table>\n<thead>\n<tr>\n<th>问题</th>\n<th>例子</th>\n<th>解决方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>强制同步布局影响页面响应和动画。</td>\n<td>强制浏览器在像素管道中过早地执行布局，导致渲染过程中的重复步骤。</td>\n<td>先批量读取样式，然后再进行样式的任何写入</td>\n</tr>\n<tr>\n<td>布局抖动影响页面响应和动画。</td>\n<td>一个将浏览器置于读-写-读-写循环的循环语句会迫使浏览器一遍又一遍地重新计算布局。</td>\n<td>使用 <a href=\"https://github.com/wilsonpage/fastdom\">FastDom</a> 库自动进行批量读写操作。</td>\n</tr>\n</tbody>\n</table>\n<h2>绘制和合成（Paint and composite）</h2>\n<p>绘制是填充像素的过程。它往往是渲染过程中性能花销最大的部分。如果你注意到你的页面没有达到设计的效果，那很可能是你的绘制部分出了问题。</p>\n<p>合成是将页面上的绘画部分放在一起在屏幕上显示的地方。在大多数情况下，如果你坚持只使用合成器属性而完全避免绘制，这会给为你的页面带来性能的重大改善，但你需要当心层数过多。</p>\n<h3>绘制和合成：工具</h3>\n<p>想知道绘制需要多长时间或绘制发生的频率吗？勾选 <strong>Performance</strong> 面板中的<a href=\"https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/evaluate-performance/reference#turn-on-advanced-paint-instrumentation\">启用高级绘制仪器（Enable advanced paint instrumentation）</a>设置，然后进行录制。如果你的大部分渲染时间都花在了绘制上，你就有绘制问题了。</p>\n<h3>绘制和合成：问题</h3>\n<p>下面这个表格描述了一些常见的绘制和合成问题和可能的方法。</p>\n<table>\n<thead>\n<tr>\n<th>问题</th>\n<th>例子</th>\n<th>解决方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>绘制风暴影响页面响应和动画。</td>\n<td>大的绘制区域，或者昂贵的绘制影响页面响应和动画。</td>\n<td>避免绘制，将正在移动的元素提升到自己的层，使用 transform 和 opacity。</td>\n</tr>\n<tr>\n<td>过多的元素的提升，大大影响了动画的性能。</td>\n<td></td>\n<td>谨慎地提升图层，只有当你知道它提供了切实的改进时才会提升。</td>\n</tr>\n</tbody>\n</table>\n<h2>相关阅读</h2>\n<ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution\">优化 JavaScript 执行</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations\">缩小样式计算的范围并降低其复杂性</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing\">避免大型、复杂的布局和布局抖动</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/rendering/simplify-paint-complexity-and-reduce-paint-areas\">简化绘制的复杂度、减小绘制区域</a></li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"#%E6%A6%82%E8%BF%B0\">概述</a></li>\n<li><a href=\"#javascript\">JavaScript</a></li>\n<li><a href=\"#%E6%A0%B7%E5%BC%8F\">样式</a></li>\n<li><a href=\"#%E5%B8%83%E5%B1%80\">布局</a></li>\n<li><a href=\"#%E7%BB%98%E5%88%B6%E5%92%8C%E5%90%88%E6%88%90paint-and-composite\">绘制和合成（Paint and composite）</a></li>\n<li><a href=\"#%E7%9B%B8%E5%85%B3%E9%98%85%E8%AF%BB\">相关阅读</a></li>\n</ul>","frontmatter":{"title":"分析运行时性能","date":"2021年10月20日","description":"本文是对文章 Analyze runtime performance 的翻译。用户往往都期待页面是可交互且丝滑流畅的，而像素管道（pixel pipeline）中的每一个阶段都有可能导致卡顿（jank）。本文帮助你学习如何识别和修复常见的可能导致运行时性能问题，以及相关的工具。","tags":["翻译","浏览器","网页渲染","网页性能"]}},"previous":{"fields":{"slug":"/浏览器工作原理——导航流程/"},"frontmatter":{"title":"浏览器工作原理——导航流程"}},"next":{"fields":{"slug":"/浏览器工作原理——渲染流程（上）/"},"frontmatter":{"title":"浏览器工作原理——渲染流程（上）"}}},"pageContext":{"id":"b731d618-0664-500c-a631-e74350f1fbb8","previousPostId":"44db4148-9c5e-5de0-877a-e5f41947ef36","nextPostId":"c324e77e-1ed3-5fbf-8e06-acdf05ac0267"}},"staticQueryHashes":["2792646216","2841359383"]}