{"componentChunkName":"component---src-templates-blog-post-js","path":"/对称的二叉树——二叉树，递归/","result":{"data":{"site":{"siteMetadata":{"title":"要没时间了的博客"}},"markdownRemark":{"id":"9d17c78d-8842-59fa-ab23-642b4a508eb1","excerpt":"题目： 请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。 例如，二叉树 [1,2,2,3,4,4,3] 是对称的。 但是下面这个 [1,2,2,null,3,null,…","html":"<h2>题目：</h2>\n<p>请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。</p>\n<p>例如，二叉树 [1,2,2,3,4,4,3] 是对称的。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">二叉树-1\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3</code></pre></div>\n<p>但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">二叉树-2\n    1\n   / \\\n  2   2\n   \\   \\\n   3    3</code></pre></div>\n<h3>示例：</h3>\n<p>示例一：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">输入：root = [1,2,2,3,4,4,3]\n输出：true</code></pre></div>\n<p>示例二：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">输入：root = [1,2,2,null,3,null,3]\n输出：false</code></pre></div>\n<h3>限制:</h3>\n<p><code class=\"language-text\">0 &lt;= 节点个数 &lt;= 1000</code></p>\n<h2>思路</h2>\n<h3><del>检测中序遍历后的序列</del></h3>\n<p>观察题目之后，第一个想到的思路是将二叉树中的数字按照中序遍历添加到一个数组中，由于中序遍历的特点，数组中间的元素是树的根节点，左侧是左子树生成的中序遍历数组，右边是右子树生成的中序遍历数组。一颗对称的树所生成的数组左右两侧是对称的，可以用类似检测回文的方式检测该数组，来达到检测对称二叉树的目的。</p>\n<p>例如，对于上文中的二叉树-1，中序遍历之后生成的数组为以下顺序。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token number\">3</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">4</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">4</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">3</span></code></pre></div>\n<p>具体做法是：在数组的前后设置双指针，检测两个指针指向的数字是否相等，如果不相等则不是对称二叉树，直到两个指针重合。</p>\n<p>后来发现这种检测方式是不严谨的，一个明显的反例。有一棵二叉树如下所示：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">二叉树<span class=\"token operator\">-</span><span class=\"token number\">3</span>\n    <span class=\"token number\">5</span>\n   <span class=\"token operator\">/</span> \\\n  <span class=\"token number\">4</span>   <span class=\"token number\">1</span>\n   \\   \\\n   <span class=\"token number\">1</span>    <span class=\"token number\">4</span>\n  <span class=\"token operator\">/</span>    <span class=\"token operator\">/</span>\n <span class=\"token number\">2</span>    <span class=\"token number\">2</span></code></pre></div>\n<p>对于二叉树-3，中序遍历之后生成的数组为以下顺序。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token number\">4</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">5</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">4</span></code></pre></div>\n<p>这个数组是明显是左右对称的，但是生成它的二叉树也明显不是对称二叉树。这是因为不同的二叉树中序遍历的结果可能是相同的，而且有很多种情况。所以这个思路行不通。</p>\n<h3>递归检测左右子树</h3>\n<p>观察对称二叉树的结构，可以发现，对称的关键是<strong>根节点的左子树和右子树互为镜像</strong>，而两个树互为镜像需要满足的条件是：</p>\n<ol>\n<li>都为 null 的两棵树互为镜像。</li>\n<li>两棵树中只有一棵树为 null，则这两棵树不互为镜像。</li>\n<li>根节点的值相同</li>\n<li>A  树的左子树与 B 树的右子树互为镜像。</li>\n<li>A 树的右子树与 B 树的左子树互为镜像。</li>\n</ol>\n<p>问题拆分之后，有了递归的结构。这样可以把以上的规则对应到递归问题框架的每个步骤中：</p>\n<ul>\n<li>递归终止：1，2。</li>\n<li>处理当前节点：3。</li>\n<li>缩减问题规模，解决子问题：4，5。</li>\n</ul>\n<p><a href=\"https://www.processon.com/view/link/617f9003f346fb0ef3d51641\">图解</a></p>\n<h3>要点：</h3>\n<ul>\n<li>每个递归函数要处理的是<strong>两个</strong>树的根节点，而在一般的二叉树问题中，每个递归函数往往只用处理单个节点，虽然处理的节点数量不同，但是基本的原则是一致的：处理当前层级，拆分出当前问题的子问题，求解子问题，根据子问题的解计算出当前问题的解。</li>\n<li>谨慎处理递归退出条件。</li>\n</ul>\n<h2>代码</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"token comment\">/**\n * @param {TreeNode} root\n * @return {boolean}\n */</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">isSymmetric</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">treeLeft<span class=\"token punctuation\">,</span> treeRight</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 处理递归终止条件</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>treeLeft <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>treeRight<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>treeLeft <span class=\"token operator\">&amp;&amp;</span> treeRight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 处理当前节点</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>treeLeft<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!==</span> treeRight<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 递归处理子节点</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>treeLeft<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> treeRight<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>treeLeft<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> treeRight<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>相关阅读</h2>\n<ul>\n<li><a href=\"https://leetcode-cn.com/problems/dui-cheng-de-er-cha-shu-lcof/\">剑指 Offer 28. 对称的二叉树 - 力扣（LeetCode） (leetcode-cn.com)</a></li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"#%E9%A2%98%E7%9B%AE\">题目：</a></li>\n<li><a href=\"#%E6%80%9D%E8%B7%AF\">思路</a></li>\n<li><a href=\"#%E4%BB%A3%E7%A0%81\">代码</a></li>\n<li><a href=\"#%E7%9B%B8%E5%85%B3%E9%98%85%E8%AF%BB\">相关阅读</a></li>\n</ul>","frontmatter":{"title":"对称的二叉树——二叉树，递归","date":"2021年11月01日","description":"请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。","tags":["刷题","二叉树","递归","LeetCode"]}},"previous":{"fields":{"slug":"/gatsby-plugin-sharp 插件的故障排除记录/"},"frontmatter":{"title":"gatsby-plugin-sharp 插件的故障排除记录"}},"next":{"fields":{"slug":"/JavaScript面向对象——创建对象/"},"frontmatter":{"title":"JavaScript面向对象——创建对象和原型"}}},"pageContext":{"id":"9d17c78d-8842-59fa-ab23-642b4a508eb1","previousPostId":"d9693f1c-8f86-512a-a1ed-757e3cffc0c2","nextPostId":"fd2a936b-6a3f-5338-90a3-4d059624779d"}},"staticQueryHashes":["2792646216","2841359383"]}