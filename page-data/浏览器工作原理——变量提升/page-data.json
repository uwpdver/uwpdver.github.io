{"componentChunkName":"component---src-templates-blog-post-js","path":"/浏览器工作原理——变量提升/","result":{"data":{"site":{"siteMetadata":{"title":"要没时间了的博客"}},"markdownRemark":{"id":"0aac13dc-a8b3-5747-8558-97a1bac916bb","excerpt":"总结 JavaScript 引擎在执行之前会先编译，编译过程会将函数的声明和赋值以及由 var…","html":"<h2>总结</h2>\n<p>JavaScript 引擎在执行之前会先<strong>编译</strong>，编译过程会将<strong>函数的声明和赋值</strong>以及<strong>由 var 关键字声明的变量的声明</strong>添加到内存里的执行上下文中，表现为在代码执行阶段，虽然还未执行到某个变量或函数的声明语句，却可以访问该变量而不会报错的一种行为。就像是将这些声明提升到了所有代码的开头。</p>\n<h2>要点</h2>\n<p>程序中的语句通常按照顺序执行，JavaScript 引擎会先编译一遍要执行的 JavaScript 代码，再执行代码。</p>\n<h2>变量提升（hoisting）</h2>\n<p>从概念的字面意义上说，“变量提升”意味着变量和函数的声明会在物理层面移动到代码的最前面，但这么说并不准确。实际上变量和函数声明在代码里的位置是不会动的，而是在编译阶段被放入内存中。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span></code></pre></div>\n<p>以上语句可以分为声明和赋值两句</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token comment\">// 声明一个变量</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 为声明的变量赋值</span></code></pre></div>\n<p>var 关键字声明的变量的声明会提升到作用域开头，但是赋值不会提升。</p>\n<p>JavaScript 的执行过程，先编译，再执行，预编译的作用是什么？是准备执行上下文吗。</p>\n<h2>编译阶段</h2>\n<p>编译阶段会将为要执行的 JavaScript 代码在内存中生成两部分内容：执行上下文和可执行的代码。</p>\n<p>执行上下文是 JavaScript 执行一段代码时的运行环境。执行上下文中存在一个变量环境对象（VariableEnvironment），它保存了当前代码执行环境中的变量。将名称和值绑定起来。在代码执行过程中，JavaScript 引擎在遇到变量名时会在变量环境对象中查找。根据代码顺序，后声明的变量会覆盖之前声明的变量。</p>\n<h2>关于作用域中声明的同名变量和函数</h2>\n<ul>\n<li>如果是同名的函数，JavaScript编译阶段会选择最后声明的那个。</li>\n<li>如果变量和函数同名，那么在编译阶段，变量的声明会被忽略</li>\n<li>函数提升要比变量提升的优先级要高一些，且不会被变量声明覆盖，但是会被变量赋值之后覆盖。</li>\n</ul>\n<h2>思考题</h2>\n<p>分析输出结果</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">showName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">showName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">showName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>解答：</h3>\n<p>这段代码交给 JavaScript 引擎之后，JavaScript 引擎先对这段代码进行编译，顺序是从上到下。</p>\n<p>遇到 var 关键词声明了一个 showName 变量，此时将 showName 添加到函数的执行上下文的变量环境对象中，它的值为默认的 undefined。</p>\n<p>随后又遇到了一个函数声明，其声明了名为 showName 的函数，因为在声明同名变量的情况下，函数声明的优先级高于var 声明的变量，所以 showName 变量的值变成函数的地址，</p>\n<p>到了代码的末尾，编译过程结束。</p>\n<p>开始执行代码，是对 showName 这个名字的函数调用，此时 JavaScript 引擎会在执行上下文中查找 showName 这个名字，在执行上下文的变量环境变量中找到了其对应的值，是一个函数，于是对该函数进行调用，结果输出 1。</p>\n<p>然后再执行第二行代码中的赋值部分，将输出 2 的函数赋值给变量 showName。</p>\n<p>执行阶段结束。</p>","tableOfContents":"<ul>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n<li><a href=\"#%E8%A6%81%E7%82%B9\">要点</a></li>\n<li><a href=\"#%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87hoisting\">变量提升（hoisting）</a></li>\n<li><a href=\"#%E7%BC%96%E8%AF%91%E9%98%B6%E6%AE%B5\">编译阶段</a></li>\n<li><a href=\"#%E5%85%B3%E4%BA%8E%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%AD%E5%A3%B0%E6%98%8E%E7%9A%84%E5%90%8C%E5%90%8D%E5%8F%98%E9%87%8F%E5%92%8C%E5%87%BD%E6%95%B0\">关于作用域中声明的同名变量和函数</a></li>\n<li><a href=\"#%E6%80%9D%E8%80%83%E9%A2%98\">思考题</a></li>\n</ul>","frontmatter":{"title":"浏览器工作原理——变量提升","date":"2021年10月23日","description":"《浏览器工作原理》专栏第七节的学习笔记，学习了变量提升的原理。","tags":["笔记","JavaScript","浏览器工作原理"]}},"previous":{"fields":{"slug":"/浏览器工作原理——渲染流程（下）/"},"frontmatter":{"title":"浏览器工作原理——渲染流程（下）"}},"next":{"fields":{"slug":"/两数和——哈希表/"},"frontmatter":{"title":"两数和——哈希表"}}},"pageContext":{"id":"0aac13dc-a8b3-5747-8558-97a1bac916bb","previousPostId":"b1053f09-7f4e-5171-9746-4e5aa6bf376a","nextPostId":"8bce4b57-07a4-5a03-9f6a-10908e1051a9"}},"staticQueryHashes":["2792646216","2841359383"]}