{"componentChunkName":"component---src-templates-blog-post-js","path":"/两数和——哈希表/","result":{"data":{"site":{"siteMetadata":{"title":"要没时间了的博客"}},"markdownRemark":{"id":"8bce4b57-07a4-5a03-9f6a-10908e1051a9","excerpt":"题目： 给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。 你可以按任意顺序返回答案。 示例： 示例一： 输入：nums = [2,7,1…","html":"<h2>题目：</h2>\n<p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>\n<p>你可以按任意顺序返回答案。</p>\n<h3>示例：</h3>\n<p>示例一：<br>\n输入：nums = [2,7,11,15], target = 9<br>\n输出：[0,1]<br>\n解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</p>\n<p>示例二：<br>\n输入：nums = [3,2,4], target = 6<br>\n输出：[1,2]</p>\n<p>示例三：\n输入：nums = [3,3], target = 6<br>\n输出：[0,1]</p>\n<h3>提示：</h3>\n<p>2 &#x3C;= nums.length &#x3C;= 104<br>\n-109 &#x3C;= nums[i] &#x3C;= 109<br>\n-109 &#x3C;= target &#x3C;= 109</p>\n<p>只会存在一个有效答案</p>\n<p>进阶：你可以想出一个时间复杂度小于 O(n2) 的算法吗？</p>\n<h2>思路</h2>\n<p>阅读题目，这个问题可以用：在整数数组中，找出<strong>和为给定整数值</strong>的两个整数的下标。</p>\n<p>关键是两个数，这两个数的和是给定的，而且这个和的加数只能在给定的数组里面。所以，基于给定的和，对于数组里的每一个整数，另外一个满足条件的被加数都是确定的，如果这个被加数在数组中，获取被加数的下标以及当前加数的下标，就可以返回答案了。</p>\n<p>关键在于如何在数组中找到这个被加数，对于数组中的每一个整数而言，这个问题就变成了，<strong>如何在整数数组中找到一个特定的整数</strong>，这样就是一个比较简单的问题了。</p>\n<p>我们可以从头到尾遍历一遍这个数组，直到找到目标整数或者遍历到末尾。但是这样对于大规模的数组是十分费时的。为了满足时间限制，我们可以想到用<strong>空间换取时间</strong>的方法——哈希表。</p>\n<p>我们可以把数组中的所有整数都作为键加入哈希表中，并且以每个整数的下标作为值，利用这个数据结构的特点，我们可以在 O(1) 的时间内找到一个特定整数所在的下标。然后我们再遍历一遍数组，查找对于每个整数其满足条件的另一个整数的下标。</p>\n<p>将所有的整数存入哈希表需要遍历一次数组，对每个整数在哈希表中查找对应的被加数也要遍历一次数组。根据题目的条件，顺序不是重要的，我们可以通过 a 找到 b，也可以通过 b 找到 a，在一开始哈希表是空的，如果先遍历到 a，虽然 a 不能在哈希表中找到它对应的被加数 b，但是当遍历到 b 时，a 已经在哈希表中了，所以我们就可以直接查找到 b，而这个结论对于 a b 在数组中的先后位置反过来的情况依然成立，所以我们可以将循环减少到一次。</p>\n<h2>代码</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span>nums<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// key:整数值,value下标</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> curNum <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">const</span> matchedNum <span class=\"token operator\">=</span> target <span class=\"token operator\">-</span> curNum<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>matchedNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>matchedNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>curNum<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>相关阅读</h2>\n<ul>\n<li><a href=\"https://leetcode-cn.com/problems/two-sum\">1. 两数之和 - 力扣（LeetCode） (leetcode-cn.com)</a></li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"#%E9%A2%98%E7%9B%AE\">题目：</a></li>\n<li><a href=\"#%E6%80%9D%E8%B7%AF\">思路</a></li>\n<li><a href=\"#%E4%BB%A3%E7%A0%81\">代码</a></li>\n<li><a href=\"#%E7%9B%B8%E5%85%B3%E9%98%85%E8%AF%BB\">相关阅读</a></li>\n</ul>","frontmatter":{"title":"两数和——哈希表","date":"2021年10月23日","description":"如果思路清晰，这是一道简单的题目，但是有点难说清楚。","tags":["算法","散列","LeetCode"]}},"previous":{"fields":{"slug":"/浏览器工作原理——变量提升/"},"frontmatter":{"title":"浏览器工作原理——变量提升"}},"next":{"fields":{"slug":"/反转链表——递归，链表/"},"frontmatter":{"title":"反转链表——递归，链表"}}},"pageContext":{"id":"8bce4b57-07a4-5a03-9f6a-10908e1051a9","previousPostId":"0aac13dc-a8b3-5747-8558-97a1bac916bb","nextPostId":"15ba5fc9-d111-5204-bbee-6ce492bcdaa3"}},"staticQueryHashes":["2792646216","2841359383"]}