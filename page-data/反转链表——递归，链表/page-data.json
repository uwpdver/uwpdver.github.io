{"componentChunkName":"component---src-templates-blog-post-js","path":"/反转链表——递归，链表/","result":{"data":{"site":{"siteMetadata":{"title":"要没时间了的博客"}},"markdownRemark":{"id":"15ba5fc9-d111-5204-bbee-6ce492bcdaa3","excerpt":"题目： 给你单链表的头节点  ，请你反转链表，并返回反转后的链表。 示例： 示例一： 示例一图片 示例二： 示例二图片 示例三： 提示： 链表中节点的数目范围是 [0, 5000] -5000 <= Node.val <= 500…","html":"<h2>题目：</h2>\n<p>给你单链表的头节点 <code class=\"language-text\">head</code> ，请你反转链表，并返回反转后的链表。</p>\n<h3>示例：</h3>\n<p>示例一：</p>\n<p><img src=\"https://bl3301files.storage.live.com/y4mKX4kXheMf85DBRQMRmE2TTtt-ILOP_17kH_k4Pe-mVQF6tY55-LR8ADzMI5tO37cWlybtee2osjjjT0L15iKSLJJhKjlv429giAQBAyDNlU-3yZJg3Wd8bCwHa1bUn06IMk_FhUeH0u2Y8IZtKtVUVZyitbzZVqcx4xhMScvjBC0fDH1hvQvr3kYSPBX7mD7?width=542&#x26;height=222&#x26;cropmode=none\" alt=\"示例一图片\"></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">输入：head = [1,2,3,4,5]\n输出：[5,4,3,2,1]</code></pre></div>\n<p>示例二：</p>\n<p><img src=\"https://bl3301files.storage.live.com/y4mfLrTOAFTCFJvS72c8dwEs052DxT7UkUuIAJxXEFsCoFchG3e8Gq8TlChxvyuxyQYuUWy4NBZ0VPViEb2v988MWJwG9qfqXi8TL-3KJ4IuE3AwGRwqQX5SWSi2s45Ahupog_x7MjkIZIhc8wQLex-_SrXVUMtfM3i9AbFfXz4oP0NW4vIJCYC-DXnUBTuUN3m?width=182&#x26;height=222&#x26;cropmode=none\" alt=\"示例二图片\"></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">输入：head = [1,2]\n输出：[2,1]</code></pre></div>\n<p>示例三：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">输入：head = []\n输出：[]</code></pre></div>\n<h3>提示：</h3>\n<p>链表中节点的数目范围是 [0, 5000]</p>\n<p>-5000 &#x3C;= Node.val &#x3C;= 5000</p>\n<h3>进阶：</h3>\n<p>链表可以选用迭代或递归方式完成反转。你能否用两种方法解决这道题？</p>\n<h2>思路</h2>\n<p>这道题的关键就是如何处理节点的 next 指针。</p>\n<p>该问题是一个关于链表问题，先要将完整的问题拆分成子问题，自然想到以链表的节点作为子问题的单元。我们聚焦到链表中的单个节点，发现只要将每个节点的 next 指针指向前一个节点就可以实现链表的反转了。所以处理每一个节点时，需要用到该节点的<strong>前一个节点</strong>。</p>\n<h3>迭代实现</h3>\n<p>迭代的思路比较常规，保存两个指针，一个 <code class=\"language-text\">cur</code> 指针指向当前遍历的节点，一个 <code class=\"language-text\">prev</code> 指针指向当前遍历的节点的前一个节点，对链表遍历一遍，将每个节点的 next 指针指向 <code class=\"language-text\">prev</code>。</p>\n<h3>递归实现</h3>\n<p>递归的思路通常不会第一时间被想到，注意这个方法存在调用栈超过最大限制的风险。思路就是利用函数调用栈先进后出的结构特点，函数调用时栈帧压入栈的顺序，与函数返回时栈帧弹出栈的顺序正好相反。所以如果按照原来的顺序对每个节点依次调用递归函数，那么在函数的返回阶段，相当于按照相反的顺序访问链表，这样每个函数中，递归调用的返回值就正好是当前节点的上一个节点。这样相当于隐式保存了当前节点和上一个节点，但是这样在调用时会在调用栈保存链表中的所有节点，所以内存占用会比较大。</p>\n<h2>注意</h2>\n<ul>\n<li>递归实现中，注意要保存递归调用阶段的最后一个节点，这个节点是反转后的链表的首节点，也是该问题的返回值。</li>\n<li>反转前的第一个节点，反转过后，这个节点就变成了最后一个节点，所以需要将这个节点的 next 赋值为 null，否则链表遍历一轮之后链表中会出现环，导致无法跳出循环或者递归过程。</li>\n</ul>\n<h2>代码</h2>\n<p>公共部分</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */</span></code></pre></div>\n<p>迭代实现</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">:</span> ListNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ListNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>head <span class=\"token operator\">||</span> head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>prev<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> next <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span>\n        prev <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n        cur <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> prev<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>递归实现</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">:</span> ListNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ListNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>head<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> newHead <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">function</span> <span class=\"token function\">reverseListCore</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">:</span> ListNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ListNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> reversedListTail <span class=\"token operator\">=</span> <span class=\"token function\">reverseListCore</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            reversedListTail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            newHead <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 保存最后一个节点作为反转后链表的第一个节点</span>\n        <span class=\"token punctuation\">}</span> \n        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token function\">reverseListCore</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 防止出现环</span>\n    <span class=\"token keyword\">return</span> newHead<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>相关阅读</h2>\n<ul>\n<li><a href=\"https://leetcode-cn.com/problems/reverse-linked-list/\">206. 反转链表 - 力扣（LeetCode） (leetcode-cn.com)</a></li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"#%E9%A2%98%E7%9B%AE\">题目：</a></li>\n<li><a href=\"#%E6%80%9D%E8%B7%AF\">思路</a></li>\n<li><a href=\"#%E6%B3%A8%E6%84%8F\">注意</a></li>\n<li><a href=\"#%E4%BB%A3%E7%A0%81\">代码</a></li>\n<li><a href=\"#%E7%9B%B8%E5%85%B3%E9%98%85%E8%AF%BB\">相关阅读</a></li>\n</ul>","frontmatter":{"title":"反转链表——递归，链表","date":"2021年10月24日","description":"这道题有递归和迭代两种不同的思路，考验了链表操作和函数调用的特点。","tags":["刷题","算法","链表","递归","LeetCode"]}},"previous":{"fields":{"slug":"/两数和——哈希表/"},"frontmatter":{"title":"两数和——哈希表"}},"next":{"fields":{"slug":"/浏览器工作原理——调用栈/"},"frontmatter":{"title":"浏览器工作原理——调用栈"}}},"pageContext":{"id":"15ba5fc9-d111-5204-bbee-6ce492bcdaa3","previousPostId":"8bce4b57-07a4-5a03-9f6a-10908e1051a9","nextPostId":"d4f3f25b-dd81-5e03-8454-5af92587f471"}},"staticQueryHashes":["2792646216","2841359383"]}