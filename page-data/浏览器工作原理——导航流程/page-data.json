{"componentChunkName":"component---src-templates-blog-post-js","path":"/浏览器工作原理——导航流程/","result":{"data":{"site":{"siteMetadata":{"title":"要没时间了的博客"}},"markdownRemark":{"id":"44db4148-9c5e-5de0-877a-e5f41947ef36","excerpt":"总结 从多个进程的角度，解释从浏览器接受到 URL 到页面显示中间的一些过程。重点主要是导航的过程，包括以地址栏输入 URL 的方式打开新的页面，或者从一个页面的链接跳转到另一个页面。 文章的特点是说到了多个进程之间的通信和协作。主要是网络进程，浏览器进程，渲染进程之间的通信。在 Google…","html":"<h2>总结</h2>\n<p>从多个进程的角度，解释从浏览器接受到 URL 到页面显示中间的一些过程。重点主要是导航的过程，包括以地址栏输入 URL 的方式打开新的页面，或者从一个页面的链接跳转到另一个页面。</p>\n<p>文章的特点是说到了多个进程之间的通信和协作。主要是网络进程，浏览器进程，渲染进程之间的通信。在 Google 官方的文档中，分为浏览器进程，和渲染进程。其中浏览器进程包括 UI 线程，存储线程，网络线程。</p>\n<h2>导航流程</h2>\n<ol>\n<li>\n<h3>处理输入（浏览器进程->UI 线程）</h3>\n<p>用户在地址栏输入时，UI 线程会判断所输入的字符串是查询搜索还是 URL？如果是查询搜索则将查询内容发送到默认搜索引擎。如果是 URL 则发送到 URL 对应的网站。</p>\n</li>\n<li>\n<h3>向 URL 发送请求（浏览器进程->网络线程）</h3>\n<ul>\n<li>\n<p><strong>查找缓存</strong><br>\n网络进程会根据缓存机制查找缓存，如果缓存不可用，则需要发送请求进入网络请求流程。</p>\n<p>缓存过期，Last-Modified/If-Last-Modified，Etag/If-None-Modified，Expire，Cache-Control。200，304。</p>\n</li>\n<li>\n<p><strong>DNS 解析</strong><br>\n依次从浏览器 DNS 缓存，到本机的 host 文件，再发送 DNS 查询。递归查询。从根域名服务器遍历。</p>\n</li>\n<li>\n<p><strong>TCP 连接</strong><br>\n三次握手：SYN, SYN-ACK, ACK，四次挥手，传输控制</p>\n</li>\n<li>\n<p><strong>TLS 连接</strong><br>\n认证加密，重点是认证中心是可信的，认证中心将信任通过证书授予到某个 web 服务器。客户端通过认证中心的公钥解密证书，确认证书可信从而确认与之一同被发送的 web 服务器的公钥可信。再通该可信的公钥加密密钥，发送给当前连接中与之通信的 web 服务器，如果对方是同一个 web 服务器，那么就应该拥有对应的私钥，就能够解密数据从而取出密钥。</p>\n</li>\n<li>\n<p><strong>数据传输</strong><br>\n发送请求行，请求头，请求体。</p>\n</li>\n</ul>\n</li>\n<li>\n<h3>阅读响应（浏览器进程->网络线程）</h3>\n<ul>\n<li><strong>数据类型</strong><br>\n一旦收到响应体数据开始，网络线程根据响应头数据分析响应体的数据类型，并且更具不同的数据类型决定下一步。如果响应是 HTML 文件类型，则下一步的目的就是将数据传递给渲染进程，如果是 zip 文件类型或者其他文件请求，则需要将数据传递给下载管理器。</li>\n<li><strong>重定向</strong><br>\n如果响应头中的状态码为 301 或 302，则需要重定向，重定向的地址为响应头中的 Location 字段。然后重新发起新的请求。</li>\n<li><strong>安全检查</strong><br>\n这也是安全中断检测发生的地方。如果域名和响应数据被检测为恶意网站，则网络线程会发出警报以显示警告页面。此外 Cross Origin Read Block 检查的发生，以确保敏感的跨站点数据不会进入渲染过程。</li>\n</ul>\n</li>\n<li>\n<h3>查找渲染进程（浏览器进程->网络线程 到 浏览器进程->UI 线程 到 渲染进程）</h3>\n<p>完成安全检查之后，网络线程确信浏览器应该导航到请求的站点，网络线程通知 UI 线程数据已经准备就绪，然后 UI 线程找到一个渲染进程对网页进行渲染。</p>\n<p>由于网络请求可能需要几百毫秒才能得到响应，所以 UI 线程可以在网络线程收到响应数据之前尝试主动查找或启动与网络线程发送请求并行的渲染进程。当网络线程接受数据时，渲染进程已经准备就绪了。</p>\n</li>\n<li>\n<h3>提交导航（浏览器线程 -> 渲染线程）</h3>\n<p>网络线程的响应数据和渲染进程都准备就绪时，浏览器进程将通过 IPC 通知渲染进程“提交导航”，此外浏览器进程还会将数据流传递给渲染进程，以便渲染进程可以继续接收响应数据。</p>\n</li>\n<li>\n<h3>确认提交（渲染线程 -> 浏览器线程）</h3>\n<p>渲染线程接受完响应数据之后，通过 IPC 向浏览器进程发送“确认提交”的消息。此时导航阶段就完成了，进入文档加载阶段。</p>\n<p>浏览器进程的 UI 线程会更新地址栏，安全指示器，和站点设置的 UI以反映新页面的站点信息。选项卡的会话历史记录也将更新，会话历史记录存储在磁盘上。</p>\n</li>\n</ol>\n<h2>提交文档阶段</h2>\n<p>浏览器进程将网络进程接收到的 HTML 数据提交给渲染进程：</p>\n<ol>\n<li>网络进程下载并读取响应头数据。</li>\n<li>网络进程响应头数据下载并读取完毕后通知并将响应头数据发送给浏览器进程。</li>\n<li>浏览器进程通知渲染进程“提交文档”并将渲染头数据转发给渲染进程。</li>\n<li>渲染进程收到“提交文档”的消息以及响应头数据后，与网络进程建立数据传输的“管道”，直接从网络进程接收剩下的响应体数据。</li>\n<li>响应体数据传输完毕之后，渲染进程发送“确认提交”的消息给浏览器进程。</li>\n<li>浏览器进程收到“确认提交”的消息后，会更新浏览器界面状态，包括安全状态、地址栏的 URL、前进后退的历史状态、并更新页面。</li>\n</ol>\n<h2>渲染阶段</h2>\n<p>Content-Type 决定浏览器对响应的处理方式，可能是转到下载管理器，也可能是当作网页处理（text/HTML）。</p>\n<h2>共用渲染进程</h2>\n<p>多个网页可能会公用一个渲染进程，取决于它们所属的站点和打开的方式：如果从 A 页面打开 B 页面，且 A 和 B 属于同一站点，那么 B 页面会 复用 A 页面的渲染进程，否则新打开的页面会使用单独的渲染进程。</p>\n<h2>相关阅读</h2>\n<ul>\n<li><a href=\"https://developers.google.com/web/updates/2018/09/inside-browser-part2\">Inside look at modern web browser (part 2)  |  Web  |  Google Developers</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work\">渲染页面：浏览器的工作原理</a></li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n<li><a href=\"#%E5%AF%BC%E8%88%AA%E6%B5%81%E7%A8%8B\">导航流程</a></li>\n<li><a href=\"#%E6%8F%90%E4%BA%A4%E6%96%87%E6%A1%A3%E9%98%B6%E6%AE%B5\">提交文档阶段</a></li>\n<li><a href=\"#%E6%B8%B2%E6%9F%93%E9%98%B6%E6%AE%B5\">渲染阶段</a></li>\n<li><a href=\"#%E5%85%B1%E7%94%A8%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B\">共用渲染进程</a></li>\n<li><a href=\"#%E7%9B%B8%E5%85%B3%E9%98%85%E8%AF%BB\">相关阅读</a></li>\n</ul>","frontmatter":{"title":"浏览器工作原理——导航流程","date":"2021年10月17日","description":"《浏览器工作原理》专栏第四节的学习笔记，学习了浏览器在导航时发生事情。","tags":["笔记","浏览器","浏览器工作原理"]}},"previous":{"fields":{"slug":"/浏览器工作原理——HTTP请求流程/"},"frontmatter":{"title":"浏览器工作原理——HTTP请求流程"}},"next":{"fields":{"slug":"/分析运行时性能/"},"frontmatter":{"title":"分析运行时性能"}}},"pageContext":{"id":"44db4148-9c5e-5de0-877a-e5f41947ef36","previousPostId":"658ec075-cbf0-592e-85e3-a1515f97f080","nextPostId":"b731d618-0664-500c-a631-e74350f1fbb8"}},"staticQueryHashes":["2792646216","2841359383"]}