{"componentChunkName":"component---src-templates-blog-post-js","path":"/合并两个有序链表——链表/","result":{"data":{"site":{"siteMetadata":{"title":"要没时间了的博客"}},"markdownRemark":{"id":"ff80c6a3-ecab-59c4-b677-d8efd0074849","excerpt":"…","html":"<h2>题目：</h2>\n<p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p>\n<h3>示例：</h3>\n<p>示例一：</p>\n<p><img src=\"https://bl3301files.storage.live.com/y4m6LzKDyuHqeTLPt1Z5PA_EedFEM2qsUV5z5izHzn0pgrZkpFbxQmJ2bdL6ALAkH7TQ9wnbtnQOIJalVkPX7X1co92QDA-wBIR6w-LGjgYQqBLInuEWJ9M1zuQUHHAUKn9MTn10F2lVrYIJzxiLiRNELyEy4mWdq9a1cZRneFu5asRwpiQ6-97gTZek4bjJC-J?width=662&#x26;height=302&#x26;cropmode=none\" alt=\"示例一图片\"></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">输入：l1 = [1,2,4], l2 = [1,3,4]\n输出：[1,1,2,3,4,4]</code></pre></div>\n<p>示例二：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">输入：l1 = [], l2 = []\n输出：[]</code></pre></div>\n<p>示例三：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">输入：l1 = [], l2 = [0]\n输出：[0]</code></pre></div>\n<h3>提示：</h3>\n<ul>\n<li>两个链表的节点数目范围是 <code class=\"language-text\">[0, 50]</code></li>\n<li><code class=\"language-text\">-100 &lt;= Node.val &lt;= 100</code></li>\n<li><code class=\"language-text\">l1</code> 和 <code class=\"language-text\">l2</code> 均按 <strong>非递减顺序</strong> 排列</li>\n</ul>\n<h2>思路</h2>\n<p>假设有一条没有串球的红绳子，还有两条串着标有数字的球的链，每条链上球的标号都是从小到大依次递增的，每次从这两条链中选择一个数字最小的球串在红绳子上，当所有的球都串到红绳子上时，这条红绳子上的所有球上标的数字就是有序的了。</p>\n<p>这个问题的关键就在于如何选择数字最小的球。这两条链中各自最小的球都在最前面，但是不能确定哪条链中最小的数字更小，所以就要比较两条链中数字最小的球哪一个更小，并将其接到绳子上，这样一个球的顺序就排好了。因为上一轮比较已经将数字最小的球接在了红绳子上，因此不能重复选择。所以需要选择这条链的下一个球，也就是数字第二小的球与另一条链上数字最小的球比较，再选出两者之间数字较小的球接在绳子上。依次类推，直到其中一条链上的所有球都被接在红绳子上了，这样这条链已经没有球可以比较了。</p>\n<p>此时有可能另外一条链中还有部分球没有串到红绳上，但是可以确定的是，这条绳上的所有球都应该比最后一个被串到红绳上的球的数字大。因为只有当前链中选择的球比另一条链中的小才会该表选择到下一个球，才会先走到末尾。所以接下来只用将没有走完的那条链拼接到红绳上就完成了。</p>\n<p>将上述的步骤用在链表上就可以概括为：</p>\n<ol>\n<li>初始化指向两条链中指向未添加到新链的最小节点的指针。</li>\n<li>比较当前两个链表中最小的节点。</li>\n<li>然后将较小的节点拼接到当前已排序链表的最后一个节点后面。</li>\n<li>然后再迭代值向较小的节点的指针和指向已排序链表的最后一个节点的指针，迭代的方式都是向后移动一个节点。</li>\n<li>重复上述两个步骤，直到两个链的指针中有一个指向 null。</li>\n<li>拼接未遍历完的节点。</li>\n<li>返回新链表的头节点指针  。</li>\n</ol>\n<h3>步骤图解</h3>\n<ol>\n<li>初始状态</li>\n</ol>\n<p><img src=\"https://bl3301files.storage.live.com/y4mjvdbWSY68KCrefLyAHrHv2-gbnGTnyC-fn9IhGlYxMy9qusABzxkBVQq8wEryM-L3Frqej0I2FDEe3UJyLtktcy5USn6MN1iaQW6afVb2pXWc2XRkoIHPyxDoH7HDwID69BO5ybfG_ZUZj5hZJL3owOoij7UI-j7BaHB2LACeax_1rR06uyItdqUdrfiAyvl?width=660&#x26;height=478&#x26;cropmode=none\" alt=\"初始状态\" title=\"初始状态\"></p>\n<ol start=\"2\">\n<li>对比 p1.val 与 p2.val，将两条链表中更小的节点拼接到新链表。</li>\n</ol>\n<p><img src=\"https://bl3301files.storage.live.com/y4mpAyoyFwiLr6LIBhPQiJ3rrcPgSWPbRoWI1a7kwanR51Oi26Rsr0cDl3aq8TiiKLdBtEIEc96Nx9dnx8_PjMJIEZ1WC0hiJ8T7LhIPaOIktrK4BjGGrIVlILtFO43MlSKakuDQ5gfylS9c4Cdm0pIt9WP4H1ALV-F-IgVJMsKQKNUqbKwz28PN_Fb_ANfmOU1?width=660&#x26;height=478&#x26;cropmode=none\" alt=\"将两条链表中更小的节点拼接到新链表\"></p>\n<ol start=\"3\">\n<li>指针迭代，newList，p2 指针均向后移动一个节点。</li>\n</ol>\n<p><img src=\"https://bl3301files.storage.live.com/y4m12zHTlpZr9K6u-WvI2c3KFgGkHcb0nvseIir0TXRMcH9aGi2h_9LOPD-iKlIjHDE2HB-hmjaHWtFiSzjeUrXZcQKpYYqC0TfH1T6uPji7qg8zBK0qtKSkCRKhovPib1WhwAhHCZqXnySvFl1PTJDozc7O-pqMBGikbSkJ6lxPVMuBGKp1mdS1jhat-mx1ZdU?width=660&#x26;height=498&#x26;cropmode=none\" alt=\"指针迭代\" title=\"指针迭代\"></p>\n<ol start=\"4\">\n<li>重复步骤 2。</li>\n</ol>\n<p><img src=\"https://bl3301files.storage.live.com/y4mWVwle5jMf_7WzzngaMZJOZWLy2YWzbYP5xSzkGBTcNXTerlJL0au-IwX9iTZFDmL1DlIlB3rQ3tEWhNPsCbSfQJ1--84yRvCYTC0pczoqCZWPno-Tnzk2DP1gvnx0NzuVNs_5oPi3wGmtf2Oq2HNJIvkJ4-HxMQV300ozWAdEGvBH0shABjbKvigzIBD6Lvg?width=660&#x26;height=498&#x26;cropmode=none\" alt=\"拼接第二个节点\" title=\"拼接第二个节点\"></p>\n<ol start=\"5\">\n<li>重复步骤 3。</li>\n</ol>\n<p><img src=\"https://bl3301files.storage.live.com/y4msoIxLeX72kg--BtWBmxm6z1Y4pj6X2Vhf0dc9x2VTcvdRt-lOupmjT24H0PoGLRl9FLZDvutD9VrUyUEs9duNtnDanJMqZMKz0_CCsBOJSNWHfkLzrVOps-xiWxDvt5KOEq7bxTWXw3_q6GnaF9Y8H73ZYl4OlNb9FDvS2T01jRWL5yzFdXUrzdWNb0_xQXQ?width=660&#x26;height=498&#x26;cropmode=none\" alt=\"继续移动指针\" title=\"继续移动指针\"></p>\n<ol start=\"6\">\n<li>重复步骤 2。</li>\n</ol>\n<p><img src=\"https://bl3301files.storage.live.com/y4msoIxLeX72kg--BtWBmxm6z1Y4pj6X2Vhf0dc9x2VTcvdRt-lOupmjT24H0PoGLRl9FLZDvutD9VrUyUEs9duNtnDanJMqZMKz0_CCsBOJSNWHfkLzrVOps-xiWxDvt5KOEq7bxTWXw3_q6GnaF9Y8H73ZYl4OlNb9FDvS2T01jRWL5yzFdXUrzdWNb0_xQXQ?width=660&#x26;height=498&#x26;cropmode=none\" alt=\"继续移动指针\" title=\"继续移动指针\"></p>\n<ol start=\"7\">\n<li>重复步骤 2。</li>\n</ol>\n<p><img src=\"https://bl3301files.storage.live.com/y4msoIxLeX72kg--BtWBmxm6z1Y4pj6X2Vhf0dc9x2VTcvdRt-lOupmjT24H0PoGLRl9FLZDvutD9VrUyUEs9duNtnDanJMqZMKz0_CCsBOJSNWHfkLzrVOps-xiWxDvt5KOEq7bxTWXw3_q6GnaF9Y8H73ZYl4OlNb9FDvS2T01jRWL5yzFdXUrzdWNb0_xQXQ?width=660&#x26;height=498&#x26;cropmode=none\" alt=\"继续拼接\" title=\"继续拼接\"></p>\n<ol start=\"8\">\n<li>重复步骤 3。</li>\n</ol>\n<p><img src=\"https://bl3301files.storage.live.com/y4m0leT614D9Sxs96pFlj22HmqEL5CmkBcajZngpaKaIDQthnt18J20hTihDSkNN0jD14l93obPlFOKD3SggN8NiwbhDb21EwNCyDUF6R3uxLiq9HvfbzeAPVWHOPICrZKz6yjoCwjcIAG7gkEWOHcjDl_mSi80GFPuDNn-YsudsffSqFKTQvFFBg-WSRftHoh0?width=660&#x26;height=498&#x26;cropmode=none\" alt=\"继续移动指针\" title=\"继续移动指针\"></p>\n<ol start=\"9\">\n<li>重复步骤 2。</li>\n</ol>\n<p><img src=\"https://bl3301files.storage.live.com/y4m_1JVjzGbWvBeyj7wVjcK4d399ZXzIYg98rWrQsNZIKK0leTlcPUAGs13XWVWYAfbw-p0zdSHpNiTefj9VDXnQo6WFSrW438tCwft9LdfHbX-8zj-w9BKCLN2esdpdV0nWqP1-2lgtwIYtspxjBfa_1cTRpBVtuwmCGVzVzu4iLel01yMkSG2YHZRRyx0QJBf?width=660&#x26;height=498&#x26;cropmode=none\" alt=\"继续比较，拼接\" title=\"继续比较，拼接\"></p>\n<ol start=\"10\">\n<li>重复步骤 3。</li>\n</ol>\n<p><img src=\"https://bl3301files.storage.live.com/y4mtJsMQI9yhmF-tRY3aMpaKwkqOxgO55GRmAZ5PRZD8dD9xLnYDWtXaJtH7zcibvmuu5lHBj3OyklIkf5aR1zPEdaNx5KvIOU-HyKRTQalqp0eQX03XaThBrDTMh3w_HZjzAGJiheln0MO9S6dmJ_neFhe6S_NFvicozdzgD7ovBRDGaJ7V9J_TKbKJWY33CKt?width=660&#x26;height=498&#x26;cropmode=none\" alt=\"继续移动指针\" title=\"继续移动指针\"></p>\n<ol start=\"11\">\n<li>重复步骤 2。</li>\n</ol>\n<p><img src=\"https://bl3301files.storage.live.com/y4mSqghN-ccfpkZ5ftJrXbuynW6Bx4guabWE3D2VPbuaWzlzSBbAhFxMR1LdQ_CC1WDvFi45EPMrw9NWRbDDPc26KfIndLlDnnKf-kuzsID7baMxG19Ei-tpWyxX_bC11G4VKPd1ZAwLciDAlkmYyqYSCrZL12DL6PpNhAkNTcAixL69ChuUzNgJBZB1oPhOoHP?width=660&#x26;height=498&#x26;cropmode=none\" alt=\"继续比较，拼接\" title=\"继续比较，拼接\"></p>\n<ol start=\"12\">\n<li>重复步骤 3。</li>\n</ol>\n<p><img src=\"https://bl3301files.storage.live.com/y4mXsKmHgBu5xxlrX0WENBuOX45tX5SYI-bvKei9zGt8qMdZEzrZ69vrelpR1T0v4KCZgRIpI-Ep9SRu3zmeNMoU5ES650YCUZzKxTYGSSLicj-QOhHw8KITODs6re_F5dr3Z5_bYg-uRX7I-2v1uF47w5wFRbFw59yG2cDDNg1okHl8dJYSu5EtfEDiDYp8Z8Y?width=660&#x26;height=498&#x26;cropmode=none\" alt=\"继续移动指针\" title=\"继续移动指针\"></p>\n<ol start=\"13\">\n<li>到达链表末尾，退出循环，拼接未遍历完节点。</li>\n</ol>\n<p><img src=\"https://bl3301files.storage.live.com/y4m09thjBQSLMFh2AoPNHa23iP-iMdBkC5NDm_-Bh22zpYaQkxjPCReV3vdEgs5wLZvlK81uYHKKCOcIJZOmyEIFszf7-vV0jVBiYCjKeCRUgaqnwG0FDs2QQZSSx-eVGeZgr21tp1tYG4t5DCYoFODRZvzlZ4T_5j6pEeChd7fvJ9SLPSYhlOHlv3ViFDrrjFl?width=660&#x26;height=498&#x26;cropmode=none\" alt=\"拼接未遍历完节点\" title=\"拼接未遍历完节点\"></p>\n<ol start=\"14\">\n<li>返回 dummy 的下一个节点</li>\n</ol>\n<p><img src=\"https://bl3301files.storage.live.com/y4mkPwgUo5y2MNriWB6Tocas0EaH_BNEgyGkCbibg67_dcoT-yvI39pXJklUMNP5SkL--wCGIGqVAmMd1ennZPkSvO4ivA7T8mmSIyAvfjIFdf0frvy0sOuUr6Jqat4sv2iN5F86BlLUofBs-1GBI5KMhG4u7LBE3m5QFj3jWRiQlhgQx8GhoFBgmMLRTMq7EaM?width=660&#x26;height=486&#x26;cropmode=none\" alt=\"返回 dummy 的下一个节点\" title=\"返回 dummy 的下一个节点\"></p>\n<h3>递归解法</h3>\n<p>这道题还有递归的解法，其实思路都一是相同的，只是缩减问题规模的方式不同。迭代方式的重复操作是放在循环里，而递归方式的重复操作则是放在函数中，每次递归的函数调用都相当于执行依次迭代方式中的循环体中的代码。递归方式的变量迭代通过<strong>参数传递</strong>和函数的<strong>返回值</strong>实现，而迭代方式则是直接为局部变量赋值。递归方式需要对不同的分支传递不同的参数，副作用和返回值也不同。细节直接看代码实现就能理解了。</p>\n<h2>注意</h2>\n<ul>\n<li>其中一条链表遍历完之后就应该停止循环。</li>\n<li>将没有遍历完的链表从当前的节点开始拼接到新链表。</li>\n<li>使用 dummy 节点让所有的节点以相同的方式处理，而不用对首节点特殊处理。</li>\n<li>熟练链表的操作。</li>\n</ul>\n<h2>代码</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */</span></code></pre></div>\n<h3>迭代解法</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span>l1<span class=\"token operator\">:</span> ListNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> l2<span class=\"token operator\">:</span> ListNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ListNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> dummyNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">,</span> newList<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>l1<span class=\"token punctuation\">,</span> l2<span class=\"token punctuation\">,</span> dummyNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">&amp;&amp;</span> p2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        newList<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> p2<span class=\"token punctuation\">.</span>val <span class=\"token operator\">?</span> p1 <span class=\"token operator\">:</span> p2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 比较，拼接</span>\n        <span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> p2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>p2 <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指针迭代</span>\n        newList <span class=\"token operator\">=</span> newList<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指针迭代</span>\n    <span class=\"token punctuation\">}</span>\n    newList<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> p1 <span class=\"token operator\">||</span> p2<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> dummyNode<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>递归解法</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span>l1<span class=\"token operator\">:</span> ListNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> l2<span class=\"token operator\">:</span> ListNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ListNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">&amp;&amp;</span> l2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> l2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          l1<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">,</span> l2<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">return</span> l1<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          l2<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">,</span> l2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">return</span> l2<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> l1 <span class=\"token operator\">||</span> l2 <span class=\"token comment\">// 到达一条链的末尾，返回另一条链中的当前遍历到的节点</span>\n  <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>相关阅读</h2>\n<ul>\n<li><a href=\"https://leetcode-cn.com/problems/reverse-linked-list/\">206. 反转链表 - 力扣（LeetCode） (leetcode-cn.com)</a></li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"#%E9%A2%98%E7%9B%AE\">题目：</a></li>\n<li><a href=\"#%E6%80%9D%E8%B7%AF\">思路</a></li>\n<li><a href=\"#%E6%B3%A8%E6%84%8F\">注意</a></li>\n<li><a href=\"#%E4%BB%A3%E7%A0%81\">代码</a></li>\n<li><a href=\"#%E7%9B%B8%E5%85%B3%E9%98%85%E8%AF%BB\">相关阅读</a></li>\n</ul>","frontmatter":{"title":"合并两个有序链表——链表","date":"2021年10月26日","description":"这道题有递归和迭代两种不同的思路，考验了链表操作和函数调用的特点。","tags":["刷题","算法","链表","LeetCode"]}},"previous":{"fields":{"slug":"/浏览器工作原理——调用栈/"},"frontmatter":{"title":"浏览器工作原理——调用栈"}},"next":{"fields":{"slug":"/盛水最多的容器——数组，双指针/"},"frontmatter":{"title":"盛最多水的容器——数组，双指针"}}},"pageContext":{"id":"ff80c6a3-ecab-59c4-b677-d8efd0074849","previousPostId":"d4f3f25b-dd81-5e03-8454-5af92587f471","nextPostId":"46792beb-bda3-5ef1-a451-1c9a8c249869"}},"staticQueryHashes":["2792646216","2841359383"]}